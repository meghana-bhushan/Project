package com.empower.demo.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.empower.demo.service.MyUserDetailsService;

@Configuration
public class MySecurityConfiguration {
    @Autowired
    private MyUserDetailsService ms;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http
            .authorizeHttpRequests(auth -> {
                auth.requestMatchers("/home").permitAll();   // Public home page
                auth.requestMatchers("/admin/**").hasRole("ADMIN");  // Admin access
                auth.requestMatchers("/host/**").hasRole("HOST");    // Host access
                auth.requestMatchers("/user/**").hasRole("USER");    // User access
                auth.anyRequest().authenticated();                   // All others require authentication
            })
            .formLogin(AbstractAuthenticationFilterConfigurer::permitAll)  // Permit all for login
            .logout(logout -> logout.permitAll())                          // Permit logout for all
            .build();
    }

    @Bean
    public UserDetailsService userDetailsService() {
        return ms;  // Custom user details service
    }

    @Bean
    public AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
        authenticationProvider.setUserDetailsService(userDetailsService());
        authenticationProvider.setPasswordEncoder(passwordEncoder());
        return authenticationProvider;
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();  // BCrypt for encoding passwords
    }
}
##########################################################################################

explanation


Added Role HOST:

Access to URLs starting with /host/** is restricted to users with the HOST role.
Role-based Access Control:

/admin/** for ADMIN
/host/** for HOST
/user/** for USER
/home is publicly accessible.
All other requests require authentication.
Password Encoding:

The BCryptPasswordEncoder is used to encrypt user passwords, ensuring strong security.
URL Role Mappings:
Admin: /admin/**
Host: /host/**
User: /user/**
Public Pages: /home, /login, /register
This setup ensures proper access control for your event management application with three roles: admin, host, and user. Let me know if you need further adjustments!





